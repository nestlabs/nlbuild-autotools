#
#    Copyright 2020 nlbuild-autotools Authors. All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

#
#   Description:
#     This file is the automake footer for building
#     MAKEDIRS and MAKEDIR_TARGETS.
#
#     MAKEDIRS is a list of directories that produce implicit dependencies,
#       where running '$(MAKE) -C <DIR>' will produce the desired implicit
#       dependencies in a way that the current build expects.
#
#     MAKEDIR_TARGETS are *explicit* dependencies that follow the form
#        '<DIR>/<TARGET>' where '$(MAKE) -C <DIR> <TARGET>' will produce
#         the desired depency
#
#     Note: the effect of any MAKEDIR is to make all compilation targets
#        (all _OBJECTS) defined by a Makefile.am to depend upon an invocation
#        of `$(MAKE) -C <DIR>` in that directory.
#


# same as ifdef MAKEDIRS || MAKEDIR_TARGETS
ifneq ($(strip $(MAKEDIRS)$(MAKEDIR_TARGETS)),)

# check to see if makedirs_id has been set for this invocation
ifneq ($(origin makedirs_id),environment)

  # the parent of this shell is the "root" make invocation
  override makedirs_id:=makedirs_$(shell echo $$PPID)

  # makes makedirs_id an environment var
  export makedirs_id

endif

endif # ifneq ($(strip $(MAKEDIRS)$(MAKEDIR_TARGETS)),)

#
# MAKEDIRS section
#
ifdef MAKEDIRS

.PHONY: makedirs

# trick make into building makedirs first by forcing it to try to make an
#  include file that depends on makedirs
-include .makedirs_trick_never_exists.min

.makedirs_trick_never_exists.min: makedirs


# This says chunk says:
#  1. makedirs (the order-only PHONY target above) depends on the file
#       makedirs_id in each of the MAKEDIR directories
#  2. build $(makedir_id) by running make, then touching the id file
#  3. clean and distclean should whack all makedir_id files that might
#       have accumulated
define makedirs-makedir-rules
makedirs: $1/$(makedirs_id)

$1/$(makedirs_id):
	$(NL_V_AT)$(MAKE) -C $1
	$(NL_V_AT)touch $$@
	$(NL_V_AT)$(RM) $$(filter-out $$@,$$(wildcard $1/makedirs_*))

$1/makedirs_clean:
	$(NL_V_AT)$(RM) $$(wildcard $1/makedirs_*)

.PHONY: $1/makedirs_clean
distclean clean: $1/makedirs_clean

endef # define makedirs-makedir-rules

# run the above chunk for each MAKEDIR
$(foreach dir,$(MAKEDIRS),\
	$(eval $(call makedirs-makedir-rules,$(dir))))


endif # ifdef MAKEDIRS


#
# MAKEDIR_TARGETS section
#
ifdef MAKEDIR_TARGETS

# This chunk says:
#  1. the target ($1 in this function) depends on the target's
#       makedir_id file in its directory
#  2. build the target with make
#  2. build the target's makedir_id by touching the id file (and
#       whacking any leftovers, accumulated ones)
#  3. clean and distclean should whack all makedir_id files that might
#       have accumulated
define makedirs-makedir-target-rules
$1: $1.$(makedirs_id)
	$(NL_V_AT)$(MAKE) -C $(dir $1) $(notdir $1)

$1.$(makedirs_id):
	$(NL_V_AT)touch $$@
	$(NL_V_AT)$(RM) $$(filter-out $$@,$$(wildcard $(notdir $1).makedirs_*))

.PHONY: $1.makedirs_clean
distclean clean: $1.makedirs_clean

$1.makedirs_clean:
	$(NL_V_AT)$(RM) $$(wildcard $1.makedirs_*)

endef # makedirs-makedir-target-rules

# invoke the chunk above for each of the MAKEDIR_TARGETS
$(foreach makedir_target,$(MAKEDIR_TARGETS),\
   $(eval $(call makedirs-makedir-target-rules,$(makedir_target))))

endif # ifdef MAKEDIR_TARGETS
